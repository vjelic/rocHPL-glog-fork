{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "5e9ffc5c-d93d-3085-a7a5-78c9a4ed8519",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses certain C library functions that are considered unsafe. These functions are unsafe because they do not perform bounds checking or other necessary validation, which can lead to buffer overflow attacks, format string vulnerabilities, or integer overflows.\n\nIn this case, the function `atoi(num)` is used, which converts a string to an integer. This function does not check for overflow or underflow, and does not signal any error in case of invalid input. This can lead to unexpected behavior if the input string is not a valid integer or if the integer is out of range.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives that perform necessary validation. In the case of `atoi(num)`, a safer alternative is `strtol(num, &endptr, base)`, which allows for error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi(num)` function with `strtol(num, &endptr, base)`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int number = strtol(num, &endptr, 10);\n\nif (endptr == num) {\n    // num does not contain a valid integer\n} else if (errno == ERANGE) {\n    // The integer is out of range\n} else {\n    // The integer is valid and in range\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library provides general purpose functions, including the `strtol` function.\n- `<cerrno>`: This library provides macros for reporting error conditions through the `errno` macro.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "3807ca9d-6bdf-3245-815d-29db2a242703",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses certain C library functions that are considered unsafe. These functions are unsafe because they do not perform bounds checking or other necessary validation, which can lead to buffer overflow attacks, format string vulnerabilities, or integer overflows.\n\nIn this case, the function `atoi(num)` is used, which converts a string to an integer. This function does not check for overflow or underflow, and does not signal any error in case of invalid input. This can lead to unexpected behavior if the input string is not a valid integer or if the integer is out of range.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives that perform necessary validation. In the case of `atoi(num)`, a safer alternative is `strtol(num, &endptr, base)`, which allows for error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi(num)` function with `strtol(num, &endptr, base)`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int number = strtol(num, &endptr, 10);\n\nif (endptr == num) {\n    // num does not contain a valid integer\n} else if (errno == ERANGE) {\n    // The integer is out of range\n} else {\n    // The integer is valid and in range\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library provides general purpose functions, including the `strtol` function.\n- `<cerrno>`: This library provides macros for reporting error conditions through the `errno` macro.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "bfa4e0d1-674f-34b0-8a47-670e80108709",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses certain C library functions that are considered unsafe. These functions are unsafe because they do not perform bounds checking or other necessary validation, which can lead to buffer overflow attacks, format string vulnerabilities, or integer overflows.\n\nIn this case, the function `atoi(num)` is used, which converts a string to an integer. This function does not check for overflow or underflow, and does not signal any error in case of invalid input. This can lead to unexpected behavior if the input string is not a valid integer or if the integer is out of range.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives that perform necessary validation. In the case of `atoi(num)`, a safer alternative is `strtol(num, &endptr, base)`, which allows for error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi(num)` function with `strtol(num, &endptr, base)`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int number = strtol(num, &endptr, 10);\n\nif (endptr == num) {\n    // num does not contain a valid integer\n} else if (errno == ERANGE) {\n    // The integer is out of range\n} else {\n    // The integer is valid and in range\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library provides general purpose functions, including the `strtol` function.\n- `<cerrno>`: This library provides macros for reporting error conditions through the `errno` macro.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "6023c299-23a3-3df3-b358-0d64d1144b41",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses certain C library functions that are considered unsafe. These functions are unsafe because they do not perform bounds checking or other necessary validation, which can lead to buffer overflow attacks, format string vulnerabilities, or integer overflows.\n\nIn this case, the function `atoi(num)` is used, which converts a string to an integer. This function does not check for overflow or underflow, and does not signal any error in case of invalid input. This can lead to unexpected behavior if the input string is not a valid integer or if the integer is out of range.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives that perform necessary validation. In the case of `atoi(num)`, a safer alternative is `strtol(num, &endptr, base)`, which allows for error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi(num)` function with `strtol(num, &endptr, base)`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int number = strtol(num, &endptr, 10);\n\nif (endptr == num) {\n    // num does not contain a valid integer\n} else if (errno == ERANGE) {\n    // The integer is out of range\n} else {\n    // The integer is valid and in range\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library provides general purpose functions, including the `strtol` function.\n- `<cerrno>`: This library provides macros for reporting error conditions through the `errno` macro.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "e2be3103-b291-3c23-81e2-d3519be15b86",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strlen` function in C and C++ is used to find the length of a string. However, it can lead to vulnerabilities if not used properly. The function counts the number of characters in a string until it reaches a null character (`'\\0'`). If the string is not null-terminated, `strlen` will keep reading memory until it encounters a null character, which can lead to buffer overflows, segmentation faults, or other undefined behavior.\n\nIn the provided code snippet, `strlen(num) + 1` is used to increment a pointer (`lineptr`). If `num` is not a null-terminated string, `strlen(num)` could read beyond the allocated memory for `num`, leading to undefined behavior.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always ensure that your strings are null-terminated. This can be done by initializing your strings with a null character or by manually adding a null character at the end of your strings.\n\nAlso, consider using safer alternatives to `strlen` such as `strnlen`, which takes an additional parameter specifying the maximum number of characters to read. This can prevent reading beyond the allocated memory even if the string is not null-terminated.\n\n## Source Code Fix Recommendation\n\nReplace `strlen(num)` with `strnlen(num, MAX_LEN)`, where `MAX_LEN` is the maximum expected length of `num`. This ensures that `strnlen` does not read beyond `MAX_LEN` characters, even if `num` is not null-terminated.\n\n```cpp\nlineptr += strnlen(num, MAX_LEN) + 1;\n```\n\n## Library Dependencies\n\nThe code example requires the `cstring` library for the `strlen` function.\n\n```cpp\n#include <cstring>\n```\n\n## References\n\n- [OWASP C/C++ Vulnerabilities](https://owasp.org/www-pdf-archive/OWASP_SCP_Quick_Reference_Guide_v2.pdf)\n- [CWE-126: Buffer Over-read](https://cwe.mitre.org/data/definitions/126.html)"
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "03206ebe-4c2d-3426-8337-0f647a71f2e3",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses certain C library functions that are considered unsafe. These functions are unsafe because they do not perform bounds checking or other necessary validation, which can lead to buffer overflow attacks, format string vulnerabilities, or integer overflows.\n\nIn this case, the function `atoi(num)` is used, which converts a string to an integer. This function does not check for overflow or underflow, and does not signal any error in case of invalid input. This can lead to unexpected behavior if the input string is not a valid integer or if the integer is out of range.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives that perform necessary validation. In the case of `atoi(num)`, a safer alternative is `strtol(num, &endptr, base)`, which allows for error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi(num)` function with `strtol(num, &endptr, base)`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int number = strtol(num, &endptr, 10);\n\nif (endptr == num) {\n    // num does not contain a valid integer\n} else if (errno == ERANGE) {\n    // The integer is out of range\n} else {\n    // The integer is valid and in range\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library provides general purpose functions, including the `strtol` function.\n- `<cerrno>`: This library provides macros for reporting error conditions through the `errno` macro.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "1413fafb-f60f-325e-adb4-f8a33c6a8c27",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strlen` function in C and C++ is used to find the length of a string. However, it can lead to vulnerabilities if not used properly. The function counts the number of characters in a string until it reaches a null character (`'\\0'`). If the string is not null-terminated, `strlen` will keep reading memory until it encounters a null character, which can lead to buffer overflows, segmentation faults, or other undefined behavior.\n\nIn the provided code snippet, `strlen(num) + 1` is used to increment a pointer (`lineptr`). If `num` is not a null-terminated string, `strlen(num)` could read beyond the allocated memory for `num`, leading to undefined behavior.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always ensure that your strings are null-terminated. This can be done by initializing your strings with a null character or by manually adding a null character at the end of your strings.\n\nAlso, consider using safer alternatives to `strlen` such as `strnlen`, which takes an additional parameter specifying the maximum number of characters to read. This can prevent reading beyond the allocated memory even if the string is not null-terminated.\n\n## Source Code Fix Recommendation\n\nReplace `strlen(num)` with `strnlen(num, MAX_LEN)`, where `MAX_LEN` is the maximum expected length of `num`. This ensures that `strnlen` does not read beyond `MAX_LEN` characters, even if `num` is not null-terminated.\n\n```cpp\nlineptr += strnlen(num, MAX_LEN) + 1;\n```\n\n## Library Dependencies\n\nThe code example requires the `cstring` library for the `strlen` function.\n\n```cpp\n#include <cstring>\n```\n\n## References\n\n- [OWASP C/C++ Vulnerabilities](https://owasp.org/www-pdf-archive/OWASP_SCP_Quick_Reference_Guide_v2.pdf)\n- [CWE-126: Buffer Over-read](https://cwe.mitre.org/data/definitions/126.html)"
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "4f2ba8b9-a1ff-34a3-ac7b-6e64d8c7b988",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses certain C library functions that are considered unsafe. These functions are unsafe because they do not perform bounds checking or other necessary validation, which can lead to buffer overflow attacks, format string vulnerabilities, or integer overflows.\n\nIn this case, the function `atoi(num)` is used, which converts a string to an integer. This function does not check for overflow or underflow, and does not signal any error in case of invalid input. This can lead to unexpected behavior if the input string is not a valid integer or if the integer is out of range.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives that perform necessary validation. In the case of `atoi(num)`, a safer alternative is `strtol(num, &endptr, base)`, which allows for error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi(num)` function with `strtol(num, &endptr, base)`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int number = strtol(num, &endptr, 10);\n\nif (endptr == num) {\n    // num does not contain a valid integer\n} else if (errno == ERANGE) {\n    // The integer is out of range\n} else {\n    // The integer is valid and in range\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library provides general purpose functions, including the `strtol` function.\n- `<cerrno>`: This library provides macros for reporting error conditions through the `errno` macro.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "a500a13f-0fac-3216-9c2f-c6f42f2bdc8e",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses certain C library functions that are considered unsafe. These functions are unsafe because they do not perform bounds checking or other necessary validation, which can lead to buffer overflow attacks, format string vulnerabilities, or integer overflows.\n\nIn this case, the function `atoi(num)` is used, which converts a string to an integer. This function does not check for overflow or underflow, and does not signal any error in case of invalid input. This can lead to unexpected behavior if the input string is not a valid integer or if the integer is out of range.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives that perform necessary validation. In the case of `atoi(num)`, a safer alternative is `strtol(num, &endptr, base)`, which allows for error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi(num)` function with `strtol(num, &endptr, base)`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int number = strtol(num, &endptr, 10);\n\nif (endptr == num) {\n    // num does not contain a valid integer\n} else if (errno == ERANGE) {\n    // The integer is out of range\n} else {\n    // The integer is valid and in range\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library provides general purpose functions, including the `strtol` function.\n- `<cerrno>`: This library provides macros for reporting error conditions through the `errno` macro.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "f5288999-24fb-39c7-8f10-124adda01011",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses certain C library functions that are considered unsafe. These functions are unsafe because they do not perform bounds checking or other necessary validation, which can lead to buffer overflow attacks, format string vulnerabilities, or integer overflows.\n\nIn this case, the function `atoi(num)` is used, which converts a string to an integer. This function does not check for overflow or underflow, and does not signal any error in case of invalid input. This can lead to unexpected behavior if the input string is not a valid integer or if the integer is out of range.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives that perform necessary validation. In the case of `atoi(num)`, a safer alternative is `strtol(num, &endptr, base)`, which allows for error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi(num)` function with `strtol(num, &endptr, base)`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int number = strtol(num, &endptr, 10);\n\nif (endptr == num) {\n    // num does not contain a valid integer\n} else if (errno == ERANGE) {\n    // The integer is out of range\n} else {\n    // The integer is valid and in range\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library provides general purpose functions, including the `strtol` function.\n- `<cerrno>`: This library provides macros for reporting error conditions through the `errno` macro.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "f5378ae5-4f0e-398d-9ceb-c19424308efe",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses certain C library functions that are considered unsafe. These functions are unsafe because they do not perform bounds checking or other necessary validation, which can lead to buffer overflow attacks, format string vulnerabilities, or integer overflows.\n\nIn this case, the function `atoi(num)` is used, which converts a string to an integer. This function does not check for overflow or underflow, and does not signal any error in case of invalid input. This can lead to unexpected behavior if the input string is not a valid integer or if the integer is out of range.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives that perform necessary validation. In the case of `atoi(num)`, a safer alternative is `strtol(num, &endptr, base)`, which allows for error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi(num)` function with `strtol(num, &endptr, base)`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int number = strtol(num, &endptr, 10);\n\nif (endptr == num) {\n    // num does not contain a valid integer\n} else if (errno == ERANGE) {\n    // The integer is out of range\n} else {\n    // The integer is valid and in range\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library provides general purpose functions, including the `strtol` function.\n- `<cerrno>`: This library provides macros for reporting error conditions through the `errno` macro.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "a99d02a7-e0e9-3a18-a123-02ef827c7ac2",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses certain C library functions that are considered unsafe. These functions are unsafe because they do not perform bounds checking or other necessary validation, which can lead to buffer overflow attacks, format string vulnerabilities, or integer overflows.\n\nIn this case, the function `atoi(num)` is used, which converts a string to an integer. This function does not check for overflow or underflow, and does not signal any error in case of invalid input. This can lead to unexpected behavior if the input string is not a valid integer or if the integer is out of range.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives that perform necessary validation. In the case of `atoi(num)`, a safer alternative is `strtol(num, &endptr, base)`, which allows for error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi(num)` function with `strtol(num, &endptr, base)`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int number = strtol(num, &endptr, 10);\n\nif (endptr == num) {\n    // num does not contain a valid integer\n} else if (errno == ERANGE) {\n    // The integer is out of range\n} else {\n    // The integer is valid and in range\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library provides general purpose functions, including the `strtol` function.\n- `<cerrno>`: This library provides macros for reporting error conditions through the `errno` macro.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "5ead943f-f274-3665-b24c-80867efdb537",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strlen` function in C and C++ is used to find the length of a string. However, it can lead to vulnerabilities if not used properly. The function counts the number of characters in a string until it reaches a null character (`'\\0'`). If the string is not null-terminated, `strlen` will keep reading memory until it encounters a null character, which can lead to buffer overflows, segmentation faults, or other undefined behavior.\n\nIn the provided code snippet, `strlen(num) + 1` is used to increment a pointer (`lineptr`). If `num` is not a null-terminated string, `strlen(num)` could read beyond the allocated memory for `num`, leading to undefined behavior.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always ensure that your strings are null-terminated. This can be done by initializing your strings with a null character or by manually adding a null character at the end of your strings.\n\nAlso, consider using safer alternatives to `strlen` such as `strnlen`, which takes an additional parameter specifying the maximum number of characters to read. This can prevent reading beyond the allocated memory even if the string is not null-terminated.\n\n## Source Code Fix Recommendation\n\nReplace `strlen(num)` with `strnlen(num, MAX_LEN)`, where `MAX_LEN` is the maximum expected length of `num`. This ensures that `strnlen` does not read beyond `MAX_LEN` characters, even if `num` is not null-terminated.\n\n```cpp\nlineptr += strnlen(num, MAX_LEN) + 1;\n```\n\n## Library Dependencies\n\nThe code example requires the `cstring` library for the `strlen` function.\n\n```cpp\n#include <cstring>\n```\n\n## References\n\n- [OWASP C/C++ Vulnerabilities](https://owasp.org/www-pdf-archive/OWASP_SCP_Quick_Reference_Guide_v2.pdf)\n- [CWE-126: Buffer Over-read](https://cwe.mitre.org/data/definitions/126.html)"
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "f8696281-da9f-358c-9cbb-8d6eaed6fc7e",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses certain C library functions that are considered unsafe. These functions are unsafe because they do not perform bounds checking or other necessary validation, which can lead to buffer overflow attacks, format string vulnerabilities, or integer overflows.\n\nIn this case, the function `atoi(num)` is used, which converts a string to an integer. This function does not check for overflow or underflow, and does not signal any error in case of invalid input. This can lead to unexpected behavior if the input string is not a valid integer or if the integer is out of range.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives that perform necessary validation. In the case of `atoi(num)`, a safer alternative is `strtol(num, &endptr, base)`, which allows for error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi(num)` function with `strtol(num, &endptr, base)`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int number = strtol(num, &endptr, 10);\n\nif (endptr == num) {\n    // num does not contain a valid integer\n} else if (errno == ERANGE) {\n    // The integer is out of range\n} else {\n    // The integer is valid and in range\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library provides general purpose functions, including the `strtol` function.\n- `<cerrno>`: This library provides macros for reporting error conditions through the `errno` macro.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "bd577708-64f4-354c-9087-c1074ea01121",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses certain C library functions that are considered unsafe. These functions are unsafe because they do not perform bounds checking or other necessary validation, which can lead to buffer overflow attacks, format string vulnerabilities, or integer overflows.\n\nIn this case, the function `atoi(num)` is used, which converts a string to an integer. This function does not check for overflow or underflow, and does not signal any error in case of invalid input. This can lead to unexpected behavior if the input string is not a valid integer or if the integer is out of range.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives that perform necessary validation. In the case of `atoi(num)`, a safer alternative is `strtol(num, &endptr, base)`, which allows for error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi(num)` function with `strtol(num, &endptr, base)`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int number = strtol(num, &endptr, 10);\n\nif (endptr == num) {\n    // num does not contain a valid integer\n} else if (errno == ERANGE) {\n    // The integer is out of range\n} else {\n    // The integer is valid and in range\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library provides general purpose functions, including the `strtol` function.\n- `<cerrno>`: This library provides macros for reporting error conditions through the `errno` macro.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "c1e82495-a45d-3abc-a869-bd58deb8e331",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strlen` function in C and C++ is used to find the length of a string. However, it can lead to vulnerabilities if not used properly. The function counts the number of characters in a string until it reaches a null character (`'\\0'`). If the string is not null-terminated, `strlen` will keep reading memory until it encounters a null character, which can lead to buffer overflows, segmentation faults, or other undefined behavior.\n\nIn the provided code snippet, `strlen(num) + 1` is used to increment a pointer (`lineptr`). If `num` is not a null-terminated string, `strlen(num)` could read beyond the allocated memory for `num`, leading to undefined behavior.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always ensure that your strings are null-terminated. This can be done by initializing your strings with a null character or by manually adding a null character at the end of your strings.\n\nAlso, consider using safer alternatives to `strlen` such as `strnlen`, which takes an additional parameter specifying the maximum number of characters to read. This can prevent reading beyond the allocated memory even if the string is not null-terminated.\n\n## Source Code Fix Recommendation\n\nReplace `strlen(num)` with `strnlen(num, MAX_LEN)`, where `MAX_LEN` is the maximum expected length of `num`. This ensures that `strnlen` does not read beyond `MAX_LEN` characters, even if `num` is not null-terminated.\n\n```cpp\nlineptr += strnlen(num, MAX_LEN) + 1;\n```\n\n## Library Dependencies\n\nThe code example requires the `cstring` library for the `strlen` function.\n\n```cpp\n#include <cstring>\n```\n\n## References\n\n- [OWASP C/C++ Vulnerabilities](https://owasp.org/www-pdf-archive/OWASP_SCP_Quick_Reference_Guide_v2.pdf)\n- [CWE-126: Buffer Over-read](https://cwe.mitre.org/data/definitions/126.html)"
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "850e4167-5092-31a7-9349-82ead2f3af21",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses certain C library functions that are considered unsafe. These functions are unsafe because they do not perform bounds checking or other necessary validation, which can lead to buffer overflow attacks, format string vulnerabilities, or integer overflows.\n\nIn this case, the function `atoi(num)` is used, which converts a string to an integer. This function does not check for overflow or underflow, and does not signal any error in case of invalid input. This can lead to unexpected behavior if the input string is not a valid integer or if the integer is out of range.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives that perform necessary validation. In the case of `atoi(num)`, a safer alternative is `strtol(num, &endptr, base)`, which allows for error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi(num)` function with `strtol(num, &endptr, base)`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int number = strtol(num, &endptr, 10);\n\nif (endptr == num) {\n    // num does not contain a valid integer\n} else if (errno == ERANGE) {\n    // The integer is out of range\n} else {\n    // The integer is valid and in range\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library provides general purpose functions, including the `strtol` function.\n- `<cerrno>`: This library provides macros for reporting error conditions through the `errno` macro.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "feeac345-4619-33ec-9c8c-e0b9ab15e8b1",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses certain C library functions that are considered unsafe. These functions are unsafe because they do not perform bounds checking or other necessary validation, which can lead to buffer overflow attacks, format string vulnerabilities, or integer overflows.\n\nIn this case, the function `atoi(num)` is used, which converts a string to an integer. This function does not check for overflow or underflow, and does not signal any error in case of invalid input. This can lead to unexpected behavior if the input string is not a valid integer or if the integer is out of range.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives that perform necessary validation. In the case of `atoi(num)`, a safer alternative is `strtol(num, &endptr, base)`, which allows for error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi(num)` function with `strtol(num, &endptr, base)`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int number = strtol(num, &endptr, 10);\n\nif (endptr == num) {\n    // num does not contain a valid integer\n} else if (errno == ERANGE) {\n    // The integer is out of range\n} else {\n    // The integer is valid and in range\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library provides general purpose functions, including the `strtol` function.\n- `<cerrno>`: This library provides macros for reporting error conditions through the `errno` macro.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "347f42ea-1f89-38a3-a440-9bee13c3d78d",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses certain C library functions that are considered unsafe. These functions are unsafe because they do not perform bounds checking or other necessary validation, which can lead to buffer overflow attacks, format string vulnerabilities, or integer overflows.\n\nIn this case, the function `atoi(num)` is used, which converts a string to an integer. This function does not check for overflow or underflow, and does not signal any error in case of invalid input. This can lead to unexpected behavior if the input string is not a valid integer or if the integer is out of range.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives that perform necessary validation. In the case of `atoi(num)`, a safer alternative is `strtol(num, &endptr, base)`, which allows for error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi(num)` function with `strtol(num, &endptr, base)`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int number = strtol(num, &endptr, 10);\n\nif (endptr == num) {\n    // num does not contain a valid integer\n} else if (errno == ERANGE) {\n    // The integer is out of range\n} else {\n    // The integer is valid and in range\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library provides general purpose functions, including the `strtol` function.\n- `<cerrno>`: This library provides macros for reporting error conditions through the `errno` macro.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "cecd35d4-cf42-337a-82a8-3548cf1e41cc",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strlen` function in C and C++ is used to find the length of a string. However, it can lead to vulnerabilities if not used properly. The function counts the number of characters in a string until it reaches a null character (`'\\0'`). If the string is not null-terminated, `strlen` will keep reading memory until it encounters a null character, which can lead to buffer overflows, segmentation faults, or other undefined behavior.\n\nIn the provided code snippet, `strlen(num) + 1` is used to increment a pointer (`lineptr`). If `num` is not a null-terminated string, `strlen(num)` could read beyond the allocated memory for `num`, leading to undefined behavior.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always ensure that your strings are null-terminated. This can be done by initializing your strings with a null character or by manually adding a null character at the end of your strings.\n\nAlso, consider using safer alternatives to `strlen` such as `strnlen`, which takes an additional parameter specifying the maximum number of characters to read. This can prevent reading beyond the allocated memory even if the string is not null-terminated.\n\n## Source Code Fix Recommendation\n\nReplace `strlen(num)` with `strnlen(num, MAX_LEN)`, where `MAX_LEN` is the maximum expected length of `num`. This ensures that `strnlen` does not read beyond `MAX_LEN` characters, even if `num` is not null-terminated.\n\n```cpp\nlineptr += strnlen(num, MAX_LEN) + 1;\n```\n\n## Library Dependencies\n\nThe code example requires the `cstring` library for the `strlen` function.\n\n```cpp\n#include <cstring>\n```\n\n## References\n\n- [OWASP C/C++ Vulnerabilities](https://owasp.org/www-pdf-archive/OWASP_SCP_Quick_Reference_Guide_v2.pdf)\n- [CWE-126: Buffer Over-read](https://cwe.mitre.org/data/definitions/126.html)"
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "f047a1ab-f007-37ca-b2c3-9ba642b22f2d",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses certain C library functions that are considered unsafe. These functions are unsafe because they do not perform bounds checking or other necessary validation, which can lead to buffer overflow attacks, format string vulnerabilities, or integer overflows.\n\nIn this case, the function `atoi(num)` is used, which converts a string to an integer. This function does not check for overflow or underflow, and does not signal any error in case of invalid input. This can lead to unexpected behavior if the input string is not a valid integer or if the integer is out of range.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives that perform necessary validation. In the case of `atoi(num)`, a safer alternative is `strtol(num, &endptr, base)`, which allows for error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi(num)` function with `strtol(num, &endptr, base)`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int number = strtol(num, &endptr, 10);\n\nif (endptr == num) {\n    // num does not contain a valid integer\n} else if (errno == ERANGE) {\n    // The integer is out of range\n} else {\n    // The integer is valid and in range\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library provides general purpose functions, including the `strtol` function.\n- `<cerrno>`: This library provides macros for reporting error conditions through the `errno` macro.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "f6d23fc7-50af-35d7-b1e0-f6ea2fc96dd9",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses certain C library functions that are considered unsafe. These functions are unsafe because they do not perform bounds checking or other necessary validation, which can lead to buffer overflow attacks, format string vulnerabilities, or integer overflows.\n\nIn this case, the function `atoi(num)` is used, which converts a string to an integer. This function does not check for overflow or underflow, and does not signal any error in case of invalid input. This can lead to unexpected behavior if the input string is not a valid integer or if the integer is out of range.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives that perform necessary validation. In the case of `atoi(num)`, a safer alternative is `strtol(num, &endptr, base)`, which allows for error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi(num)` function with `strtol(num, &endptr, base)`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int number = strtol(num, &endptr, 10);\n\nif (endptr == num) {\n    // num does not contain a valid integer\n} else if (errno == ERANGE) {\n    // The integer is out of range\n} else {\n    // The integer is valid and in range\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library provides general purpose functions, including the `strtol` function.\n- `<cerrno>`: This library provides macros for reporting error conditions through the `errno` macro.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "7f28037e-3c00-3619-b108-ea9fc3f692ed",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses certain C library functions that are considered unsafe. These functions are unsafe because they do not perform bounds checking or other necessary validation, which can lead to buffer overflow attacks, format string vulnerabilities, or integer overflows.\n\nIn this case, the function `atoi(num)` is used, which converts a string to an integer. This function does not check for overflow or underflow, and does not signal any error in case of invalid input. This can lead to unexpected behavior if the input string is not a valid integer or if the integer is out of range.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives that perform necessary validation. In the case of `atoi(num)`, a safer alternative is `strtol(num, &endptr, base)`, which allows for error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi(num)` function with `strtol(num, &endptr, base)`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int number = strtol(num, &endptr, 10);\n\nif (endptr == num) {\n    // num does not contain a valid integer\n} else if (errno == ERANGE) {\n    // The integer is out of range\n} else {\n    // The integer is valid and in range\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library provides general purpose functions, including the `strtol` function.\n- `<cerrno>`: This library provides macros for reporting error conditions through the `errno` macro.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "6a1143d0-762e-30be-bf10-253c32a0770e",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strlen` function in C and C++ is used to find the length of a string. However, it can lead to vulnerabilities if not used properly. The function counts the number of characters in a string until it reaches a null character (`'\\0'`). If the string is not null-terminated, `strlen` will keep reading memory until it encounters a null character, which can lead to buffer overflows, segmentation faults, or other undefined behavior.\n\nIn the provided code snippet, `strlen(num) + 1` is used to increment a pointer (`lineptr`). If `num` is not a null-terminated string, `strlen(num)` could read beyond the allocated memory for `num`, leading to undefined behavior.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always ensure that your strings are null-terminated. This can be done by initializing your strings with a null character or by manually adding a null character at the end of your strings.\n\nAlso, consider using safer alternatives to `strlen` such as `strnlen`, which takes an additional parameter specifying the maximum number of characters to read. This can prevent reading beyond the allocated memory even if the string is not null-terminated.\n\n## Source Code Fix Recommendation\n\nReplace `strlen(num)` with `strnlen(num, MAX_LEN)`, where `MAX_LEN` is the maximum expected length of `num`. This ensures that `strnlen` does not read beyond `MAX_LEN` characters, even if `num` is not null-terminated.\n\n```cpp\nlineptr += strnlen(num, MAX_LEN) + 1;\n```\n\n## Library Dependencies\n\nThe code example requires the `cstring` library for the `strlen` function.\n\n```cpp\n#include <cstring>\n```\n\n## References\n\n- [OWASP C/C++ Vulnerabilities](https://owasp.org/www-pdf-archive/OWASP_SCP_Quick_Reference_Guide_v2.pdf)\n- [CWE-126: Buffer Over-read](https://cwe.mitre.org/data/definitions/126.html)"
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "14d9c1c7-c849-34e9-b9a1-5b12af302cf5",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strlen` function in C and C++ is used to find the length of a string. However, it can lead to vulnerabilities if not used properly. The function counts the number of characters in a string until it reaches a null character (`'\\0'`). If the string is not null-terminated, `strlen` will keep reading memory until it encounters a null character, which can lead to buffer overflows, segmentation faults, or other undefined behavior.\n\nIn the provided code snippet, `strlen(num) + 1` is used to increment a pointer (`lineptr`). If `num` is not a null-terminated string, `strlen(num)` could read beyond the allocated memory for `num`, leading to undefined behavior.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always ensure that your strings are null-terminated. This can be done by initializing your strings with a null character or by manually adding a null character at the end of your strings.\n\nAlso, consider using safer alternatives to `strlen` such as `strnlen`, which takes an additional parameter specifying the maximum number of characters to read. This can prevent reading beyond the allocated memory even if the string is not null-terminated.\n\n## Source Code Fix Recommendation\n\nReplace `strlen(num)` with `strnlen(num, MAX_LEN)`, where `MAX_LEN` is the maximum expected length of `num`. This ensures that `strnlen` does not read beyond `MAX_LEN` characters, even if `num` is not null-terminated.\n\n```cpp\nlineptr += strnlen(num, MAX_LEN) + 1;\n```\n\n## Library Dependencies\n\nThe code example requires the `cstring` library for the `strlen` function.\n\n```cpp\n#include <cstring>\n```\n\n## References\n\n- [OWASP C/C++ Vulnerabilities](https://owasp.org/www-pdf-archive/OWASP_SCP_Quick_Reference_Guide_v2.pdf)\n- [CWE-126: Buffer Over-read](https://cwe.mitre.org/data/definitions/126.html)"
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "1b24ae21-2e92-36f5-9b21-83a5ce95b392",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses certain C library functions that are considered unsafe. These functions are unsafe because they do not perform bounds checking or other necessary validation, which can lead to buffer overflow attacks, format string vulnerabilities, or integer overflows.\n\nIn this case, the function `atoi(num)` is used, which converts a string to an integer. This function does not check for overflow or underflow, and does not signal any error in case of invalid input. This can lead to unexpected behavior if the input string is not a valid integer or if the integer is out of range.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives that perform necessary validation. In the case of `atoi(num)`, a safer alternative is `strtol(num, &endptr, base)`, which allows for error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi(num)` function with `strtol(num, &endptr, base)`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int number = strtol(num, &endptr, 10);\n\nif (endptr == num) {\n    // num does not contain a valid integer\n} else if (errno == ERANGE) {\n    // The integer is out of range\n} else {\n    // The integer is valid and in range\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library provides general purpose functions, including the `strtol` function.\n- `<cerrno>`: This library provides macros for reporting error conditions through the `errno` macro.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "a968af22-d5e5-3f45-8d2c-4fbfe7fcf601",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses certain C library functions that are considered unsafe. These functions are unsafe because they do not perform bounds checking or other necessary validation, which can lead to buffer overflow attacks, format string vulnerabilities, or integer overflows.\n\nIn this case, the function `atoi(num)` is used, which converts a string to an integer. This function does not check for overflow or underflow, and does not signal any error in case of invalid input. This can lead to unexpected behavior if the input string is not a valid integer or if the integer is out of range.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives that perform necessary validation. In the case of `atoi(num)`, a safer alternative is `strtol(num, &endptr, base)`, which allows for error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi(num)` function with `strtol(num, &endptr, base)`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int number = strtol(num, &endptr, 10);\n\nif (endptr == num) {\n    // num does not contain a valid integer\n} else if (errno == ERANGE) {\n    // The integer is out of range\n} else {\n    // The integer is valid and in range\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library provides general purpose functions, including the `strtol` function.\n- `<cerrno>`: This library provides macros for reporting error conditions through the `errno` macro.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "8bb966cf-7112-3118-8c8b-5160e23ea659",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strlen` function in C and C++ is used to find the length of a string. However, it can lead to vulnerabilities if not used properly. The function counts the number of characters in a string until it reaches a null character (`'\\0'`). If the string is not null-terminated, `strlen` will keep reading memory until it encounters a null character, which can lead to buffer overflows, segmentation faults, or other undefined behavior.\n\nIn the provided code snippet, `strlen(num) + 1` is used to increment a pointer (`lineptr`). If `num` is not a null-terminated string, `strlen(num)` could read beyond the allocated memory for `num`, leading to undefined behavior.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always ensure that your strings are null-terminated. This can be done by initializing your strings with a null character or by manually adding a null character at the end of your strings.\n\nAlso, consider using safer alternatives to `strlen` such as `strnlen`, which takes an additional parameter specifying the maximum number of characters to read. This can prevent reading beyond the allocated memory even if the string is not null-terminated.\n\n## Source Code Fix Recommendation\n\nReplace `strlen(num)` with `strnlen(num, MAX_LEN)`, where `MAX_LEN` is the maximum expected length of `num`. This ensures that `strnlen` does not read beyond `MAX_LEN` characters, even if `num` is not null-terminated.\n\n```cpp\nlineptr += strnlen(num, MAX_LEN) + 1;\n```\n\n## Library Dependencies\n\nThe code example requires the `cstring` library for the `strlen` function.\n\n```cpp\n#include <cstring>\n```\n\n## References\n\n- [OWASP C/C++ Vulnerabilities](https://owasp.org/www-pdf-archive/OWASP_SCP_Quick_Reference_Guide_v2.pdf)\n- [CWE-126: Buffer Over-read](https://cwe.mitre.org/data/definitions/126.html)"
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "8afa8d53-4ce2-3c79-a975-1f2aea0da121",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strlen` function in C and C++ is used to find the length of a string. However, it can lead to vulnerabilities if not used properly. The function counts the number of characters in a string until it reaches a null character (`'\\0'`). If the string is not null-terminated, `strlen` will keep reading memory until it encounters a null character, which can lead to buffer overflows, segmentation faults, or other undefined behavior.\n\nIn the provided code snippet, `strlen(num) + 1` is used to increment a pointer (`lineptr`). If `num` is not a null-terminated string, `strlen(num)` could read beyond the allocated memory for `num`, leading to undefined behavior.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always ensure that your strings are null-terminated. This can be done by initializing your strings with a null character or by manually adding a null character at the end of your strings.\n\nAlso, consider using safer alternatives to `strlen` such as `strnlen`, which takes an additional parameter specifying the maximum number of characters to read. This can prevent reading beyond the allocated memory even if the string is not null-terminated.\n\n## Source Code Fix Recommendation\n\nReplace `strlen(num)` with `strnlen(num, MAX_LEN)`, where `MAX_LEN` is the maximum expected length of `num`. This ensures that `strnlen` does not read beyond `MAX_LEN` characters, even if `num` is not null-terminated.\n\n```cpp\nlineptr += strnlen(num, MAX_LEN) + 1;\n```\n\n## Library Dependencies\n\nThe code example requires the `cstring` library for the `strlen` function.\n\n```cpp\n#include <cstring>\n```\n\n## References\n\n- [OWASP C/C++ Vulnerabilities](https://owasp.org/www-pdf-archive/OWASP_SCP_Quick_Reference_Guide_v2.pdf)\n- [CWE-126: Buffer Over-read](https://cwe.mitre.org/data/definitions/126.html)"
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "443d03b1-c96d-3a1d-8f73-4deaa4b32655",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses certain C library functions that are considered unsafe. These functions are unsafe because they do not perform bounds checking or other necessary validation, which can lead to buffer overflow attacks, format string vulnerabilities, or integer overflows.\n\nIn this case, the function `atoi(num)` is used, which converts a string to an integer. This function does not check for overflow or underflow, and does not signal any error in case of invalid input. This can lead to unexpected behavior if the input string is not a valid integer or if the integer is out of range.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives that perform necessary validation. In the case of `atoi(num)`, a safer alternative is `strtol(num, &endptr, base)`, which allows for error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi(num)` function with `strtol(num, &endptr, base)`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int number = strtol(num, &endptr, 10);\n\nif (endptr == num) {\n    // num does not contain a valid integer\n} else if (errno == ERANGE) {\n    // The integer is out of range\n} else {\n    // The integer is valid and in range\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library provides general purpose functions, including the `strtol` function.\n- `<cerrno>`: This library provides macros for reporting error conditions through the `errno` macro.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "8dcbc1f0-ee67-300b-a403-779df1214ae5",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses certain C library functions that are considered unsafe. These functions are unsafe because they do not perform bounds checking or other necessary validation, which can lead to buffer overflow attacks, format string vulnerabilities, or integer overflows.\n\nIn this case, the function `atoi(num)` is used, which converts a string to an integer. This function does not check for overflow or underflow, and does not signal any error in case of invalid input. This can lead to unexpected behavior if the input string is not a valid integer or if the integer is out of range.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives that perform necessary validation. In the case of `atoi(num)`, a safer alternative is `strtol(num, &endptr, base)`, which allows for error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi(num)` function with `strtol(num, &endptr, base)`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int number = strtol(num, &endptr, 10);\n\nif (endptr == num) {\n    // num does not contain a valid integer\n} else if (errno == ERANGE) {\n    // The integer is out of range\n} else {\n    // The integer is valid and in range\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library provides general purpose functions, including the `strtol` function.\n- `<cerrno>`: This library provides macros for reporting error conditions through the `errno` macro.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "07d2e96a-bb67-343e-a77b-8fa12be7409c",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses certain C library functions that are considered unsafe. These functions are unsafe because they do not perform bounds checking or other necessary validation, which can lead to buffer overflow attacks, format string vulnerabilities, or integer overflows.\n\nIn this case, the function `atoi(num)` is used, which converts a string to an integer. This function does not check for overflow or underflow, and does not signal any error in case of invalid input. This can lead to unexpected behavior if the input string is not a valid integer or if the integer is out of range.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives that perform necessary validation. In the case of `atoi(num)`, a safer alternative is `strtol(num, &endptr, base)`, which allows for error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi(num)` function with `strtol(num, &endptr, base)`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int number = strtol(num, &endptr, 10);\n\nif (endptr == num) {\n    // num does not contain a valid integer\n} else if (errno == ERANGE) {\n    // The integer is out of range\n} else {\n    // The integer is valid and in range\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library provides general purpose functions, including the `strtol` function.\n- `<cerrno>`: This library provides macros for reporting error conditions through the `errno` macro.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "72e61f63-bc1f-360f-85b1-eb7843717798",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses certain C library functions that are considered unsafe. These functions are unsafe because they do not perform bounds checking or other necessary validation, which can lead to buffer overflow attacks, format string vulnerabilities, or integer overflows.\n\nIn this case, the function `atoi(num)` is used, which converts a string to an integer. This function does not check for overflow or underflow, and does not signal any error in case of invalid input. This can lead to unexpected behavior if the input string is not a valid integer or if the integer is out of range.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives that perform necessary validation. In the case of `atoi(num)`, a safer alternative is `strtol(num, &endptr, base)`, which allows for error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi(num)` function with `strtol(num, &endptr, base)`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int number = strtol(num, &endptr, 10);\n\nif (endptr == num) {\n    // num does not contain a valid integer\n} else if (errno == ERANGE) {\n    // The integer is out of range\n} else {\n    // The integer is valid and in range\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library provides general purpose functions, including the `strtol` function.\n- `<cerrno>`: This library provides macros for reporting error conditions through the `errno` macro.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "cdf6f40c-30e8-3397-97e5-8e6f0b66e59f",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses certain C library functions that are considered unsafe. These functions are unsafe because they do not perform bounds checking or other necessary validation, which can lead to buffer overflow attacks, format string vulnerabilities, or integer overflows.\n\nIn this case, the function `atoi(num)` is used, which converts a string to an integer. This function does not check for overflow or underflow, and does not signal any error in case of invalid input. This can lead to unexpected behavior if the input string is not a valid integer or if the integer is out of range.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives that perform necessary validation. In the case of `atoi(num)`, a safer alternative is `strtol(num, &endptr, base)`, which allows for error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi(num)` function with `strtol(num, &endptr, base)`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int number = strtol(num, &endptr, 10);\n\nif (endptr == num) {\n    // num does not contain a valid integer\n} else if (errno == ERANGE) {\n    // The integer is out of range\n} else {\n    // The integer is valid and in range\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library provides general purpose functions, including the `strtol` function.\n- `<cerrno>`: This library provides macros for reporting error conditions through the `errno` macro.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "fc7f3ff7-1edd-397d-a8b3-fb5993a7e7fb",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strlen` function in C and C++ is used to find the length of a string. However, it can lead to vulnerabilities if not used properly. The function counts the number of characters in a string until it reaches a null character (`'\\0'`). If the string is not null-terminated, `strlen` will keep reading memory until it encounters a null character, which can lead to buffer overflows, segmentation faults, or other undefined behavior.\n\nIn the provided code snippet, `strlen(num) + 1` is used to increment a pointer (`lineptr`). If `num` is not a null-terminated string, `strlen(num)` could read beyond the allocated memory for `num`, leading to undefined behavior.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always ensure that your strings are null-terminated. This can be done by initializing your strings with a null character or by manually adding a null character at the end of your strings.\n\nAlso, consider using safer alternatives to `strlen` such as `strnlen`, which takes an additional parameter specifying the maximum number of characters to read. This can prevent reading beyond the allocated memory even if the string is not null-terminated.\n\n## Source Code Fix Recommendation\n\nReplace `strlen(num)` with `strnlen(num, MAX_LEN)`, where `MAX_LEN` is the maximum expected length of `num`. This ensures that `strnlen` does not read beyond `MAX_LEN` characters, even if `num` is not null-terminated.\n\n```cpp\nlineptr += strnlen(num, MAX_LEN) + 1;\n```\n\n## Library Dependencies\n\nThe code example requires the `cstring` library for the `strlen` function.\n\n```cpp\n#include <cstring>\n```\n\n## References\n\n- [OWASP C/C++ Vulnerabilities](https://owasp.org/www-pdf-archive/OWASP_SCP_Quick_Reference_Guide_v2.pdf)\n- [CWE-126: Buffer Over-read](https://cwe.mitre.org/data/definitions/126.html)"
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "494da3f7-0acc-3b2f-adab-bb08a06f51b7",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses certain C library functions that are considered unsafe. These functions are often prohibited because they can lead to buffer overflows, format string vulnerabilities, or other types of security issues. \n\nIn this case, the function `atof(num)` is used, which converts a string to a double. This function does not perform any error checking, so if the string cannot be converted into a double, it will return zero. This can lead to unexpected behavior if the string is not a valid representation of a double.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should avoid using the `atof()` function. Instead, use safer alternatives that perform error checking, such as `strtod()`. \n\n## Source Code Fix Recommendation\n\nReplace the `atof(num)` function with `strtod(num, &endptr)`. Here is an example:\n\n```cpp\n#include <cstdlib> // for strtod\n#include <cerrno>  // for errno\n\nchar* endptr;\nerrno = 0; // To distinguish success/failure after call\ndouble val = strtod(num, &endptr);\n\n// Check for various possible errors\nif ((errno == ERANGE && (val == HUGE_VALF || val == HUGE_VALL)) || (errno != 0 && val == 0)) {\n    perror(\"strtod\");\n    exit(EXIT_FAILURE);\n}\n\nif (endptr == num) {\n    fprintf(stderr, \"No digits were found\\n\");\n    exit(EXIT_FAILURE);\n}\n\n// If we got here, strtod() successfully parsed a number\n```\n\n## Library Dependencies\n\nThe code example requires the following libraries:\n\n- `<cstdlib>` for `strtod()`\n- `<cerrno>` for `errno`\n\n## References\n\n- [OWASP Prohibited C Functions](https://owasp.org/www-community/attacks/Format_string_attack)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "3cc3a899-c836-38e2-8e8a-4100d3bd3c39",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses certain C library functions that are considered unsafe. These functions are unsafe because they do not perform bounds checking or other necessary validation, which can lead to buffer overflow attacks, format string vulnerabilities, or integer overflows.\n\nIn this case, the function `atoi(num)` is used, which converts a string to an integer. This function does not check for overflow or underflow, and does not signal any error in case of invalid input. This can lead to unexpected behavior if the input string is not a valid integer or if the integer is out of range.\n\n## Mitigation Advice\n\nAvoid using unsafe C library functions. Instead, use safer alternatives that perform necessary validation. In the case of `atoi(num)`, a safer alternative is `strtol(num, &endptr, base)`, which allows for error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi(num)` function with `strtol(num, &endptr, base)`. Here is an example of how to do this:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *endptr;\nlong int number = strtol(num, &endptr, 10);\n\nif (endptr == num) {\n    // num does not contain a valid integer\n} else if (errno == ERANGE) {\n    // The integer is out of range\n} else {\n    // The integer is valid and in range\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This library provides general purpose functions, including the `strtol` function.\n- `<cerrno>`: This library provides macros for reporting error conditions through the `errno` macro.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "f9b26a7b-eefe-3b0b-aacf-5a530a868b34",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions in C++ code. These functions are often prone to buffer overflow attacks, format string vulnerabilities, or other types of security issues. In this case, the `fopen` function is used with a write (\"w\") mode, which can potentially overwrite existing files, leading to data loss or other security issues.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to these functions. For instance, instead of using `fopen`, consider using `fstream` in C++ which is safer and more flexible. Always validate and sanitize input data before processing. Avoid using functions that do not check bounds or that allow control over format strings.\n\n## Source Code Fix Recommendation\n\nHere is a safer alternative using `fstream`:\n\n```cpp\n#include <fstream>\n\nstd::ofstream outfile(file);\n```\n\n## Library Dependencies\n\nThe code example requires the following library:\n\n- `<fstream>`\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)\n\nPlease note that the links provided are active and accessible for anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "416593c7-1046-3cca-bacf-8bd172204f1d",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions in C++ code. These functions are often prone to buffer overflow attacks, format string vulnerabilities, or other types of security issues. In this case, the `fopen` function is used, which can lead to vulnerabilities if the input is not properly validated or sanitized.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to these functions, or to implement proper input validation and error handling. In the case of `fopen`, it is important to ensure that the file name and the mode string are not controlled by the user, or if they are, that they are properly sanitized and validated.\n\n## Source Code Fix Recommendation\n\n```cpp\n#include <fstream>\n\nstd::string inputFileName = \"example.txt\";\nstd::ifstream inputFile(inputFileName);\nif (!inputFile) {\n    // Handle error\n}\n```\n\nIn this example, the C++ `ifstream` class is used instead of `fopen`. This class automatically handles many of the issues that can arise with `fopen`, such as buffer overflows.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<fstream>`\n\n## OWASP Resources\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "e1c14d30-2732-324b-9532-754d5085ffab",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. In this case, the function `atoi()` is used, which is a C library function that converts a string argument to an integer. The problem with `atoi()` is that it does not handle errors well. If the input string cannot be converted into an integer, it returns zero, which can lead to unexpected behavior.\n\n## Mitigation Advice\n\nAvoid using `atoi()`. Instead, use functions that provide error checking. In C++, you can use `std::stoi()`, which throws an exception if the conversion fails. Always validate and sanitize user input to prevent injection attacks.\n\n## Source Code Fix Recommendation\n\nReplace `atoi(ARGV[i + 1])` with the following code:\n\n```cpp\n#include <string>\n#include <stdexcept>\n\ntry {\n    int value = std::stoi(ARGV[i + 1]);\n} catch (std::invalid_argument& e) {\n    // handle error\n} catch (std::out_of_range& e) {\n    // handle error\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<string>`: This library is required for `std::stoi()`.\n- `<stdexcept>`: This library is required for handling exceptions thrown by `std::stoi()`.\n\n## References\n\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "d893cd60-aab4-3f96-910b-606900acb588",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions in C++ code. These functions are often prone to buffer overflow attacks, format string vulnerabilities, or other types of security issues. In this case, the `fopen` function is used, which can lead to potential security risks if the file name or path is manipulated by an attacker.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to these functions. In the case of `fopen`, consider using `fstream` objects from the C++ Standard Library, which provide a higher level of abstraction and are generally safer.\n\n## Source Code Fix Recommendation\n\nReplace the `fopen` function with the `ofstream` object from the C++ Standard Library. Here is how you can do it:\n\n```cpp\n#include <fstream>\n\nstd::ofstream file(\"HPL.out\");\n```\n\n## Library Dependencies\n\nThe code example requires the following library:\n\n- `<fstream>`\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "a5f644b0-434b-3aa2-9b47-5c03c66df8bc",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. In this case, the function `atoi()` is used, which is a C library function that converts a string argument to an integer. The problem with `atoi()` is that it does not handle errors well. If the input string cannot be converted into an integer, it returns zero, which can lead to unexpected behavior.\n\n## Mitigation Advice\n\nAvoid using `atoi()`. Instead, use functions that provide error checking. In C++, you can use `std::stoi()`, which throws an exception if the conversion fails. Always validate and sanitize user input to prevent injection attacks.\n\n## Source Code Fix Recommendation\n\nReplace `atoi(ARGV[i + 1])` with the following code:\n\n```cpp\n#include <string>\n#include <stdexcept>\n\ntry {\n    int value = std::stoi(ARGV[i + 1]);\n} catch (std::invalid_argument& e) {\n    // handle error\n} catch (std::out_of_range& e) {\n    // handle error\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<string>`: This library is required for `std::stoi()`.\n- `<stdexcept>`: This library is required for handling exceptions thrown by `std::stoi()`.\n\n## References\n\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "dc7d7381-545d-33cb-8d73-ec617430a566",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. In this case, the function `atoi()` is used, which is a C library function that converts a string argument to an integer. The problem with `atoi()` is that it does not handle errors well. If the input string cannot be converted into an integer, it returns zero, which can lead to unexpected behavior.\n\n## Mitigation Advice\n\nAvoid using `atoi()`. Instead, use functions that provide error checking. In C++, you can use `std::stoi()`, which throws an exception if the conversion fails. Always validate and sanitize user input to prevent injection attacks.\n\n## Source Code Fix Recommendation\n\nReplace `atoi(ARGV[i + 1])` with the following code:\n\n```cpp\n#include <string>\n#include <stdexcept>\n\ntry {\n    int value = std::stoi(ARGV[i + 1]);\n} catch (std::invalid_argument& e) {\n    // handle error\n} catch (std::out_of_range& e) {\n    // handle error\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<string>`: This library is required for `std::stoi()`.\n- `<stdexcept>`: This library is required for handling exceptions thrown by `std::stoi()`.\n\n## References\n\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "625d1162-cf10-319f-b317-ec1781dc75d6",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. In this case, the function `atoi()` is used, which is a C library function that converts a string argument to an integer. The problem with `atoi()` is that it does not handle errors well. If the input string cannot be converted into an integer, it returns zero, which can lead to unexpected behavior.\n\n## Mitigation Advice\n\nAvoid using `atoi()`. Instead, use functions that provide error checking. In C++, you can use `std::stoi()`, which throws an exception if the conversion fails. Always validate and sanitize user input to prevent injection attacks.\n\n## Source Code Fix Recommendation\n\nReplace `atoi(ARGV[i + 1])` with the following code:\n\n```cpp\n#include <string>\n#include <stdexcept>\n\ntry {\n    int value = std::stoi(ARGV[i + 1]);\n} catch (std::invalid_argument& e) {\n    // handle error\n} catch (std::out_of_range& e) {\n    // handle error\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<string>`: This library is required for `std::stoi()`.\n- `<stdexcept>`: This library is required for handling exceptions thrown by `std::stoi()`.\n\n## References\n\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "7802e76f-5f58-3e64-8714-afa7e3614bb6",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. In this case, the function `atoi()` is used, which is a C library function that converts a string argument to an integer. The problem with `atoi()` is that it does not handle errors well. If the input string cannot be converted into an integer, it returns zero, which can lead to unexpected behavior.\n\n## Mitigation Advice\n\nAvoid using `atoi()`. Instead, use functions that provide error checking. In C++, you can use `std::stoi()`, which throws an exception if the conversion fails. Always validate and sanitize user input to prevent injection attacks.\n\n## Source Code Fix Recommendation\n\nReplace `atoi(ARGV[i + 1])` with the following code:\n\n```cpp\n#include <string>\n#include <stdexcept>\n\ntry {\n    int value = std::stoi(ARGV[i + 1]);\n} catch (std::invalid_argument& e) {\n    // handle error\n} catch (std::out_of_range& e) {\n    // handle error\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<string>`: This library is required for `std::stoi()`.\n- `<stdexcept>`: This library is required for handling exceptions thrown by `std::stoi()`.\n\n## References\n\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "9fdaa0e5-08a7-3990-88fc-60d91f28fae3",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Prohibited C Function Found\" is a vulnerability that arises when a C++ program uses certain C library functions that are considered unsafe. These functions are often prohibited because they can lead to buffer overflows, format string vulnerabilities, or other types of security issues. In this case, the function `atof()` is used, which converts a string to a double. This function does not perform any error checking, and if the string cannot be converted to a double, it returns zero. This can lead to unexpected behavior if the string is not a valid representation of a double.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should avoid using the `atof()` function. Instead, use safer alternatives that perform error checking, such as `strtod()`. This function converts a string to a double, but it also allows you to check if the conversion was successful.\n\n## Source Code Fix Recommendation\n\nHere is how you can replace `atof()` with `strtod()`:\n\n```cpp\n#include <cstdlib>\n#include <cerrno>\n\nchar *end;\ndouble value = strtod(ARGV[i + 1], &end);\n\nif (end == ARGV[i + 1] || *end != '\\0' || errno == ERANGE) {\n    // handle conversion error\n}\n```\n\nIn this code, `strtod()` tries to convert the string to a double. If the conversion is successful, `end` points to the first character not used in the conversion. If `end` is equal to the original string or if `*end` is not the null character, the conversion failed. The `errno` variable is also checked to see if the conversion resulted in underflow or overflow.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This header file is needed for the `strtod()` function.\n- `<cerrno>`: This header file is needed to check the `errno` variable.\n\n## References\n\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "27447518-3e08-3944-8ab7-aaad75772bb5",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "5b5b2eda-9754-37da-9cef-29609a0ab963",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "d0b2020a-bc6c-38b0-954f-a2bcd220b3f3",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. In this case, the function `atoi()` is used, which is a C library function that converts a string argument to an integer. The problem with `atoi()` is that it does not handle errors well. If the input string cannot be converted into an integer, it returns zero, which can lead to unexpected behavior.\n\n## Mitigation Advice\n\nAvoid using `atoi()`. Instead, use functions that provide error checking. In C++, you can use `std::stoi()`, which throws an exception if the conversion fails. Always validate and sanitize user input to prevent injection attacks.\n\n## Source Code Fix Recommendation\n\nReplace `atoi(ARGV[i + 1])` with the following code:\n\n```cpp\n#include <string>\n#include <stdexcept>\n\ntry {\n    int value = std::stoi(ARGV[i + 1]);\n} catch (std::invalid_argument& e) {\n    // handle error\n} catch (std::out_of_range& e) {\n    // handle error\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<string>`: This library is required for `std::stoi()`.\n- `<stdexcept>`: This library is required for handling exceptions thrown by `std::stoi()`.\n\n## References\n\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "809f5572-f4af-3d1f-b3a1-09f5dcbd0509",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "ab29de86-6882-3c9c-90ae-a167140d26d9",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. In this case, the function `atoi()` is used, which is a C library function that converts a string argument to an integer. The problem with `atoi()` is that it does not handle errors well. If the input string cannot be converted into an integer, it returns zero, which can lead to unexpected behavior.\n\n## Mitigation Advice\n\nAvoid using `atoi()`. Instead, use functions that provide error checking. In C++, you can use `std::stoi()`, which throws an exception if the conversion fails. Always validate and sanitize user input to prevent injection attacks.\n\n## Source Code Fix Recommendation\n\nReplace `atoi(ARGV[i + 1])` with the following code:\n\n```cpp\n#include <string>\n#include <stdexcept>\n\ntry {\n    int value = std::stoi(ARGV[i + 1]);\n} catch (std::invalid_argument& e) {\n    // handle error\n} catch (std::out_of_range& e) {\n    // handle error\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<string>`: This library is required for `std::stoi()`.\n- `<stdexcept>`: This library is required for handling exceptions thrown by `std::stoi()`.\n\n## References\n\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "2c9aad7d-a005-3021-a2d7-3700f9cbc7fd",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. One such function is `printf`.\n\nThe `printf` function is a common function in C and C++ for outputting text. However, it can be dangerous if used improperly, especially when handling user-supplied input. This is because `printf` can interpret certain special characters (like `%s`, `%d`, etc.) and if an attacker can control the format string, they can potentially exploit this to execute arbitrary code, read from or write to arbitrary memory locations, or cause the program to crash.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using `printf` with user-supplied input. Instead, use safer alternatives that do not interpret format strings, such as `puts` or `fputs`. If you need to format strings, use functions like `snprintf` that limit the amount of output, and always use a static format string.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```cpp\nchar* user_input = get_user_input();\nprintf(user_input);\n```\n\nUse:\n\n```cpp\nchar* user_input = get_user_input();\nputs(user_input);\n```\n\nOr, if you need to format strings:\n\n```cpp\nchar* user_input = get_user_input();\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer), \"%s\", user_input);\nputs(buffer);\n```\n\n## Library Dependencies\n\nThe code examples above require the following library:\n\n```cpp\n#include <stdio.h>\n```\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "25488bad-aa19-3724-91e3-36521ded1da1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 976,
                  "startColumn": 17,
                  "endLine": 976,
                  "endColumn": 21,
                  "charOffset": 32171,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "3807ca9d-6bdf-3245-815d-29db2a242703",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 962,
                  "startColumn": 15,
                  "endLine": 962,
                  "endColumn": 19,
                  "charOffset": 31712,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "bfa4e0d1-674f-34b0-8a47-670e80108709",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 942,
                  "startColumn": 10,
                  "endLine": 942,
                  "endColumn": 14,
                  "charOffset": 31128,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "6023c299-23a3-3df3-b358-0d64d1144b41",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 924,
                  "startColumn": 20,
                  "endLine": 924,
                  "endColumn": 24,
                  "charOffset": 30568,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "e2be3103-b291-3c23-81e2-d3519be15b86",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (strlen)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 923,
                  "startColumn": 19,
                  "endLine": 923,
                  "endColumn": 30,
                  "charOffset": 30531,
                  "charLength": 11,
                  "snippet": {
                    "text": "strlen(num)",
                    "rendered": {
                      "text": "strlen(num)",
                      "markdown": "`strlen(num)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/HPL_pdinfo.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 30531,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strlen_s(num, <size of num>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/HPL_pdinfo.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 30531,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strnlen(num, <size of num>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "03206ebe-4c2d-3426-8337-0f647a71f2e3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 1010,
                  "startColumn": 15,
                  "endLine": 1010,
                  "endColumn": 19,
                  "charOffset": 33207,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "1413fafb-f60f-325e-adb4-f8a33c6a8c27",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (strlen)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 887,
                  "startColumn": 19,
                  "endLine": 887,
                  "endColumn": 30,
                  "charOffset": 29467,
                  "charLength": 11,
                  "snippet": {
                    "text": "strlen(num)",
                    "rendered": {
                      "text": "strlen(num)",
                      "markdown": "`strlen(num)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/HPL_pdinfo.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 29467,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strlen_s(num, <size of num>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/HPL_pdinfo.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 29467,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strnlen(num, <size of num>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "4f2ba8b9-a1ff-34a3-ac7b-6e64d8c7b988",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 993,
                  "startColumn": 15,
                  "endLine": 993,
                  "endColumn": 19,
                  "charOffset": 32695,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "a500a13f-0fac-3216-9c2f-c6f42f2bdc8e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 907,
                  "startColumn": 14,
                  "endLine": 907,
                  "endColumn": 18,
                  "charOffset": 29996,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "f5288999-24fb-39c7-8f10-124adda01011",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 888,
                  "startColumn": 12,
                  "endLine": 888,
                  "endColumn": 16,
                  "charOffset": 29496,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "f5378ae5-4f0e-398d-9ceb-c19424308efe",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 856,
                  "startColumn": 12,
                  "endLine": 856,
                  "endColumn": 16,
                  "charOffset": 28505,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "a99d02a7-e0e9-3a18-a123-02ef827c7ac2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 839,
                  "startColumn": 14,
                  "endLine": 839,
                  "endColumn": 18,
                  "charOffset": 27941,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "5ead943f-f274-3665-b24c-80867efdb537",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (strlen)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 855,
                  "startColumn": 19,
                  "endLine": 855,
                  "endColumn": 30,
                  "charOffset": 28476,
                  "charLength": 11,
                  "snippet": {
                    "text": "strlen(num)",
                    "rendered": {
                      "text": "strlen(num)",
                      "markdown": "`strlen(num)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/HPL_pdinfo.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 28476,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strlen_s(num, <size of num>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/HPL_pdinfo.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 28476,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strnlen(num, <size of num>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "f8696281-da9f-358c-9cbb-8d6eaed6fc7e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 827,
                  "startColumn": 21,
                  "endLine": 827,
                  "endColumn": 25,
                  "charOffset": 27593,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "bd577708-64f4-354c-9087-c1074ea01121",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 810,
                  "startColumn": 14,
                  "endLine": 810,
                  "endColumn": 18,
                  "charOffset": 27021,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "c1e82495-a45d-3abc-a869-bd58deb8e331",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (strlen)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 826,
                  "startColumn": 19,
                  "endLine": 826,
                  "endColumn": 30,
                  "charOffset": 27555,
                  "charLength": 11,
                  "snippet": {
                    "text": "strlen(num)",
                    "rendered": {
                      "text": "strlen(num)",
                      "markdown": "`strlen(num)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/HPL_pdinfo.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 27555,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strlen_s(num, <size of num>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/HPL_pdinfo.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 27555,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strnlen(num, <size of num>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "850e4167-5092-31a7-9349-82ead2f3af21",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 798,
                  "startColumn": 21,
                  "endLine": 798,
                  "endColumn": 25,
                  "charOffset": 26665,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "feeac345-4619-33ec-9c8c-e0b9ab15e8b1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 871,
                  "startColumn": 14,
                  "endLine": 871,
                  "endColumn": 18,
                  "charOffset": 28932,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "347f42ea-1f89-38a3-a440-9bee13c3d78d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 781,
                  "startColumn": 14,
                  "endLine": 781,
                  "endColumn": 18,
                  "charOffset": 26092,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "cecd35d4-cf42-337a-82a8-3548cf1e41cc",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (strlen)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 797,
                  "startColumn": 19,
                  "endLine": 797,
                  "endColumn": 30,
                  "charOffset": 26627,
                  "charLength": 11,
                  "snippet": {
                    "text": "strlen(num)",
                    "rendered": {
                      "text": "strlen(num)",
                      "markdown": "`strlen(num)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/HPL_pdinfo.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 26627,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strlen_s(num, <size of num>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/HPL_pdinfo.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 26627,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strnlen(num, <size of num>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "f047a1ab-f007-37ca-b2c3-9ba642b22f2d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 766,
                  "startColumn": 12,
                  "endLine": 766,
                  "endColumn": 16,
                  "charOffset": 25682,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "f6d23fc7-50af-35d7-b1e0-f6ea2fc96dd9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 715,
                  "startColumn": 19,
                  "endLine": 715,
                  "endColumn": 23,
                  "charOffset": 24143,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "7f28037e-3c00-3619-b108-ea9fc3f692ed",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 749,
                  "startColumn": 14,
                  "endLine": 749,
                  "endColumn": 18,
                  "charOffset": 25118,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "6a1143d0-762e-30be-bf10-253c32a0770e",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (strlen)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 765,
                  "startColumn": 19,
                  "endLine": 765,
                  "endColumn": 30,
                  "charOffset": 25653,
                  "charLength": 11,
                  "snippet": {
                    "text": "strlen(num)",
                    "rendered": {
                      "text": "strlen(num)",
                      "markdown": "`strlen(num)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/HPL_pdinfo.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 25653,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strlen_s(num, <size of num>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/HPL_pdinfo.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 25653,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strnlen(num, <size of num>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "14d9c1c7-c849-34e9-b9a1-5b12af302cf5",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (strlen)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 703,
                  "startColumn": 19,
                  "endLine": 703,
                  "endColumn": 30,
                  "charOffset": 23736,
                  "charLength": 11,
                  "snippet": {
                    "text": "strlen(num)",
                    "rendered": {
                      "text": "strlen(num)",
                      "markdown": "`strlen(num)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/HPL_pdinfo.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 23736,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strlen_s(num, <size of num>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/HPL_pdinfo.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 23736,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strnlen(num, <size of num>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "1b24ae21-2e92-36f5-9b21-83a5ce95b392",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 686,
                  "startColumn": 14,
                  "endLine": 686,
                  "endColumn": 18,
                  "charOffset": 23200,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "a968af22-d5e5-3f45-8d2c-4fbfe7fcf601",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 704,
                  "startColumn": 19,
                  "endLine": 704,
                  "endColumn": 23,
                  "charOffset": 23772,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "8bb966cf-7112-3118-8c8b-5160e23ea659",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (strlen)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 714,
                  "startColumn": 19,
                  "endLine": 714,
                  "endColumn": 30,
                  "charOffset": 24107,
                  "charLength": 11,
                  "snippet": {
                    "text": "strlen(num)",
                    "rendered": {
                      "text": "strlen(num)",
                      "markdown": "`strlen(num)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/HPL_pdinfo.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 24107,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strlen_s(num, <size of num>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/HPL_pdinfo.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 24107,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strnlen(num, <size of num>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "8afa8d53-4ce2-3c79-a975-1f2aea0da121",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (strlen)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 670,
                  "startColumn": 19,
                  "endLine": 670,
                  "endColumn": 30,
                  "charOffset": 22670,
                  "charLength": 11,
                  "snippet": {
                    "text": "strlen(num)",
                    "rendered": {
                      "text": "strlen(num)",
                      "markdown": "`strlen(num)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/HPL_pdinfo.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 22670,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strlen_s(num, <size of num>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/HPL_pdinfo.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 22670,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strnlen(num, <size of num>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "443d03b1-c96d-3a1d-8f73-4deaa4b32655",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 682,
                  "startColumn": 18,
                  "endLine": 682,
                  "endColumn": 22,
                  "charOffset": 23044,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "8dcbc1f0-ee67-300b-a403-779df1214ae5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 671,
                  "startColumn": 20,
                  "endLine": 671,
                  "endColumn": 24,
                  "charOffset": 22707,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "07d2e96a-bb67-343e-a77b-8fa12be7409c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 653,
                  "startColumn": 13,
                  "endLine": 653,
                  "endColumn": 17,
                  "charOffset": 22140,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "72e61f63-bc1f-360f-85b1-eb7843717798",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 642,
                  "startColumn": 19,
                  "endLine": 642,
                  "endColumn": 23,
                  "charOffset": 21824,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "cdf6f40c-30e8-3397-97e5-8e6f0b66e59f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 625,
                  "startColumn": 12,
                  "endLine": 625,
                  "endColumn": 16,
                  "charOffset": 21286,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "fc7f3ff7-1edd-397d-a8b3-fb5993a7e7fb",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (strlen)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 641,
                  "startColumn": 19,
                  "endLine": 641,
                  "endColumn": 30,
                  "charOffset": 21788,
                  "charLength": 11,
                  "snippet": {
                    "text": "strlen(num)",
                    "rendered": {
                      "text": "strlen(num)",
                      "markdown": "`strlen(num)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/HPL_pdinfo.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21788,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strlen_s(num, <size of num>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/HPL_pdinfo.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21788,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strnlen(num, <size of num>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "494da3f7-0acc-3b2f-adab-bb08a06f51b7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 743,
                  "startColumn": 20,
                  "endLine": 743,
                  "endColumn": 24,
                  "charOffset": 24941,
                  "charLength": 4,
                  "snippet": {
                    "text": "atof",
                    "rendered": {
                      "text": "atof",
                      "markdown": "`atof`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "3cc3a899-c836-38e2-8e8a-4100d3bd3c39",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 608,
                  "startColumn": 12,
                  "endLine": 608,
                  "endColumn": 16,
                  "charOffset": 20759,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "f9b26a7b-eefe-3b0b-aacf-5a530a868b34",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 613,
                  "startColumn": 29,
                  "endLine": 613,
                  "endColumn": 34,
                  "charOffset": 20902,
                  "charLength": 5,
                  "snippet": {
                    "text": "fopen",
                    "rendered": {
                      "text": "fopen",
                      "markdown": "`fopen`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "416593c7-1046-3cca-bacf-8bd172204f1d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 589,
                  "startColumn": 17,
                  "endLine": 589,
                  "endColumn": 22,
                  "charOffset": 20117,
                  "charLength": 5,
                  "snippet": {
                    "text": "fopen",
                    "rendered": {
                      "text": "fopen",
                      "markdown": "`fopen`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "e1c14d30-2732-324b-9532-754d5085ffab",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 376,
                  "startColumn": 12,
                  "endLine": 376,
                  "endColumn": 16,
                  "charOffset": 15202,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "d893cd60-aab4-3f96-910b-606900acb588",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 570,
                  "startColumn": 24,
                  "endLine": 570,
                  "endColumn": 29,
                  "charOffset": 19558,
                  "charLength": 5,
                  "snippet": {
                    "text": "fopen",
                    "rendered": {
                      "text": "fopen",
                      "markdown": "`fopen`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "a5f644b0-434b-3aa2-9b47-5c03c66df8bc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 19,
                  "endLine": 344,
                  "endColumn": 23,
                  "charOffset": 14339,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "dc7d7381-545d-33cb-8d73-ec617430a566",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 19,
                  "endLine": 338,
                  "endColumn": 23,
                  "charOffset": 14186,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "625d1162-cf10-319f-b317-ec1781dc75d6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 358,
                  "startColumn": 19,
                  "endLine": 358,
                  "endColumn": 23,
                  "charOffset": 14731,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "7802e76f-5f58-3e64-8714-afa7e3614bb6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 19,
                  "endLine": 333,
                  "endColumn": 23,
                  "charOffset": 14069,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "9fdaa0e5-08a7-3990-88fc-60d91f28fae3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Found\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 372,
                  "startColumn": 13,
                  "endLine": 372,
                  "endColumn": 17,
                  "charOffset": 15116,
                  "charLength": 4,
                  "snippet": {
                    "text": "atof",
                    "rendered": {
                      "text": "atof",
                      "markdown": "`atof`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "27447518-3e08-3944-8ab7-aaad75772bb5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/pgesv/HPL_pdgesv.cpp"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 4,
                  "endLine": 160,
                  "endColumn": 10,
                  "charOffset": 5099,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "5b5b2eda-9754-37da-9cef-29609a0ab963",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/pgesv/HPL_pdgesv.cpp"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 4,
                  "endLine": 159,
                  "endColumn": 10,
                  "charOffset": 5030,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "d0b2020a-bc6c-38b0-954f-a2bcd220b3f3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 19,
                  "endLine": 319,
                  "endColumn": 23,
                  "charOffset": 13713,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "809f5572-f4af-3d1f-b3a1-09f5dcbd0509",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/pgesv/HPL_pdgesv.cpp"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 4,
                  "endLine": 158,
                  "endColumn": 10,
                  "charOffset": 4960,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "ab29de86-6882-3c9c-90ae-a167140d26d9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/HPL_pdinfo.cpp"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 19,
                  "endLine": 305,
                  "endColumn": 23,
                  "charOffset": 13321,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "2c9aad7d-a005-3021-a2d7-3700f9cbc7fd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/pgesv/HPL_pdgesv.cpp"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 4,
                  "endLine": 157,
                  "endColumn": 10,
                  "charOffset": 4891,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}